let abs = x -> if x < 0 then -x else x

// Combinatorics

let fact = n -> { let result = 1; while n > 1 do { let result = n*result; let n = n - 1 }; result }

let nPk = (n, k) -> if k = 0 then 1 else n nPk(n-1, k-1)

let nCk = (n, k) -> nPk(n, k) / fact(k)

let ftoc = f -> 5(f - 32)/9
let ctof = c -> 9c/5 + 32

// List operations

let len = list -> { let result = 0; while list != [] do { let result = result + 1; let list = pop(list) }; result }

let nth = (list, n) -> if n = 0 then top(list) else nth(pop(list), n-1)

let append = (list, value) -> if list = [] then [value] else push(append(pop(list), value), top(list))

let reverse = list -> if list = [] then [] else append(reverse(pop(list)), top(list))

let concat = (left_list, right_list) -> if left_list = [] then right_list else push(concat(pop(left_list), right_list), top(left_list))

let insert = (list, index, value) -> if index = 0 then push(list, value) else push(insert(pop(list), index-1, value), top(list))

let remove = (list, index) -> if index = 0 then pop(list) else push(remove(pop(list), index-1), top(list))

let map = (list, f) -> if list = [] then [] else push(map(pop(list), f), f(top(list)))

let reduce = (list, zero, f) -> if list = [] then zero else reduce(pop(list), f(zero, top(list)), f)

let flatmap = (list, f) -> reduce(map(list, f), [], concat)

let range = (start, end) -> { let result = []; while end >= start do { let result = push(result, end); let end = end - 1 }; result }
