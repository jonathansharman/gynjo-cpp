let abs = x -> if x < 0 then -x else x

// Combinatorics

let fact = n -> if n < 2 then 1 else n fact(n-1)

let nPk = (n, k) -> if k = 0 then 1 else n nPk(n-1, k-1)

let nCk = (n, k) -> nPk(n, k) / fact(k)

let ftoc = f -> 5(f - 32)/9
let ctof = c -> 9c/5 + 32

// List operations

let len = list -> if list = [] then 0 else 1 + len(pop(list))

let nth = (list, n) -> if n = 0 then top(list) else nth(pop(list), n-1)

let append = (list, value) -> if list = [] then [value] else push(append(pop(list), value), top(list))

let reverse = list -> if list = [] then [] else append(reverse(pop(list)), top(list))

let concat = (left_list, right_list) -> if left_list = [] then right_list else push(concat(pop(left_list), right_list), top(left_list))

let insert = (list, index, value) -> if index = 0 then push(list, value) else push(insert(pop(list), index-1, value), top(list))

let remove = (list, index) -> if index = 0 then pop(list) else push(remove(pop(list), index-1), top(list))
